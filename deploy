#!/usr/bin/ruby

# deploy - a script to deploy the "new" style rails websites on unicorn via git
# Usage: ./deploy abc/growhealthy production
# Author: jtd
# Created: 1/27/11

GATEWAY = "deploy-gateway"
REPO = "ors_git"
BASE_PATH = "/var/www"
DEPLOY_USER = "deployer"

WEB_SERVERS = %w(koala)
APP_SERVERS = %w(eel jellyfish squid)
MIGRATION_SERVER = "tuna"

ALL_SERVERS = WEB_SERVERS + APP_SERVERS + [MIGRATION_SERVER]
RUBY_SERVERS = APP_SERVERS + [MIGRATION_SERVER]

class Deployment

  attr_reader :name, :environment, :pretending, :use_gateway, :rails_2

  def initialize args
    script_name = $0.gsub(/^\.\//, "").split(/\//).last

    fatal "Usage: ./#{script_name} <application name> <environment> [options]" unless args.size >= 2
    @name, @environment, *@options = *args

    @pretending = (not (@options & ["-p", "--pretend"]).empty?)
    @use_gateway = (@options & ["-ng", "--no-gateway"]).empty?
    @rails_2 = (not (@options & ["-r2", "--rails-2"]).empty?)

    fatal "Invalid environment: #{environment}" unless %w(production demo staging).include?(@environment.downcase)

    if %w(deploy setup update migrate start stop restart).include? script_name
      send script_name
    else
      fatal "Executable should be named either deploy or setup, not #{script_name}"
    end
  end

  def start
    info "starting #{name} #{environment}..."

    execute_in_parallel(APP_SERVERS) {|server| start_server server }
  end

  def stop
    info "stopping #{name} #{environment}..."

    execute_in_parallel(APP_SERVERS) {|server| stop_server server }
  end

  def restart
    info "restarting #{name} #{environment}..."

    execute_in_parallel(APP_SERVERS) {|server| restart_server server }
  end

  def migrate
    info "migrating #{name} #{environment}..."

    run_migrations MIGRATION_SERVER
  end

  def setup
    info "setting up #{name} #{environment}..."

    execute_in_parallel(ALL_SERVERS) {|server| setup_repo server }
    execute_in_parallel(RUBY_SERVERS) {|server| setup_ruby server }

    remote_execute MIGRATION_SERVER, %(source ~/.rvm/scripts/rvm),
                                     %(cd #{deploy_directory}),
                                     %(RAILS_ENV=#{environment} rake db:create)
  end

  def deploy
    info "deploying #{name} #{environment}..."

    update

    migrate

    restart
  end

  def update
    info "updating #{name} #{environment}..."

    execute_in_parallel(ALL_SERVERS) {|server| update_code server }
    execute_in_parallel(RUBY_SERVERS) {|server| bundle_install server }
  end

  protected

  def setup_repo server
    info "[#{server}] installing codebase..."

    remote_execute server, %(cd #{BASE_PATH}),
                           %(rm -rf #{deploy_directory}),
                           %(git clone #{REPO}:#{name} #{deploy_directory}),
                           %(mkdir -p #{deploy_directory}/tmp/pids),
                           %(mkdir -p #{deploy_directory}/log)
  end

  def setup_ruby server
    info "[#{server}] installing ruby and gems..."

    remote_execute server, %(source ~/.rvm/scripts/rvm),
                           %(cd #{deploy_directory}),
                           %(gem install rubygems-update),
                           %(gem update --system),
                           %(gem install bundler),
                           %(bundle install --without development test osx > bundler.log)
  end

  def update_code server
    info "[#{server}] updating codebase..."

    remote_execute server, %(cd #{deploy_directory}),
                           %(git fetch),
                           %(git checkout -q -f origin/#{environment}),
                           %(git reset --hard)
  end

  def bundle_install server
    info "[#{server}] installing bundle..."

    remote_execute server, %(source ~/.rvm/scripts/rvm),
                           %(cd #{deploy_directory}),
                           %(bundle install --without development test osx > bundler.log)
  end

  def start_server server
    info "[#{server}] starting unicorn..."

    remote_execute server, %(source ~/.rvm/scripts/rvm),
                           %(cd #{deploy_directory}),
                           %(bundle exec #{unicorn} -c config/unicorn.rb -D -E #{environment})
  end

  def stop_server server
    info "[#{server}] stopping unicorn..."

    remote_execute server, %(cd #{deploy_directory}),
                           %(kill \\`cat tmp/pids/unicorn.pid\\`)
  end

  def restart_server server
    info "[#{server}] restarting unicorn..."

    remote_execute server, %(cd #{deploy_directory}),
                           %(kill -USR2 \\`cat tmp/pids/unicorn.pid\\`)
  end

  def run_migrations server
    info "[#{server}] running migrations..."

    remote_execute server, %(cd #{deploy_directory}),
                           %(RAILS_ENV=#{environment} rake db:migrate db:seed)
  end

  private

  def execute_in_parallel servers
    servers.map do |server|
      Thread.new(server) do |server|
        yield server
      end
    end.map {|thread| thread.join }
  end

  def remote_execute server, *command_array
    commands = command_array.join " && "

    if use_gateway
      command = %(ssh #{GATEWAY} 'ssh #{DEPLOY_USER}@#{server} "#{commands}"')
    else
      command = %(ssh #{DEPLOY_USER}@#{server} "#{commands}")
    end

    (pretending ? command : %x[#{command}]).split("\n").each do |result|
      info("[#{server}] #{result}")
    end
  end

  def unicorn
    if rails_2
      "unicorn_rails"
    else
      "unicorn"
    end
  end

  def deploy_directory
    File.join BASE_PATH, name
  end

  def info message
    STDOUT.puts message
  end

  def fatal message
    info message
    exit 1
  end
end

Deployment.new ARGV
